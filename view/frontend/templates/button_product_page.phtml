<?php
/**
 * Bolt magento2 plugin
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @category   Bolt
 * @package    Bolt_Boltpay
 * @copyright  Copyright (c) 2017-2020 Bolt Financial, Inc (https://www.bolt.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Product page Bolt Checkout button
 *
 * @var $block \Bolt\Boltpay\Block\JsProductPage
 */
if ($block->shouldDisableBoltCheckout()) { return;
}

// return if PPC option is disabled or we aren't on product page
if (!$block->isBoltProductPage()) { return;
}

if (!$block->isSupportableType()) { return;
}

$additionalClass = $block->getAdditionalCheckoutButtonClass();
?>
    <div class="bolt-product-checkout-button bolt-multi-step-checkout <?= /* @noEscape */ $additionalClass;?>"
         style="<?= /* @noEscape */ $block->getButtonCssStyles(); ?>"></div>
    <script>
        require([
            'jquery',
            'Magento_Customer/js/model/authentication-popup',
            'Magento_Customer/js/customer-data',
            'mage/validation/validation',
            'mage/cookies',
            'domReady!'
        ], function ($, authenticationPopup, customerData) {

            var customer = customerData.get('customer');
            var isGuestCheckoutAllowed = <?= /* @noEscape */ $block->isGuestCheckoutAllowed(); ?>;
            var itemPrice = <?= /* @noEscape */ $block->getProduct()->getFinalPrice(); ?>;

            var settings = window.boltConfig;
            var trackCallbacks = settings.trackCallbacks;

            // On multiple checkout open/close actions the success event remains registered
            // resulting in making the success call multiple times. This variable stores
            // the last request to be aborted before new one is sent.
            var save_request;

            var callbacks = {

                close: function () {
                    popUpOpen = false;
                    trackCallbacks.onClose();

                    if (callbacks.success_url) {
                        // redirect on success order save
                        location.href = callbacks.success_url;
                    }
                },

                onCheckoutStart: function() {
                    trackCallbacks.onCheckoutStart();
                },

                onShippingDetailsComplete: function() {
                    trackCallbacks.onShippingDetailsComplete();
                },

                onShippingOptionsComplete: function() {
                    trackCallbacks.onShippingOptionsComplete();
                },

                onPaymentSubmit: function() {
                    trackCallbacks.onPaymentSubmit();
                },

                success: function (transaction, callback) {
                    /**
                     * Success transaction handler.
                     * Sets the success url for the non-preauth flow.
                     * Calls additional javascript if defined in configuration.
                     * Triggers on success track event handler.
                     * Finally, calls the callback function
                     * that finishes the checkout modal operation.
                     *
                     * param object data    response from the non-preauth order/save controller, optional
                     * return void
                     */
                    var processSuccess = function (data) {
                        customerData.invalidate(['bolthints']);
                        try {
                            if (typeof data !== 'undefined') {
                                callbacks.success_url = data.success_url;
                            }
                            trackCallbacks.onSuccess(data);
                        } finally {
                            callback();
                        }
                    };

                    if (settings.is_pre_auth) {
                        processSuccess();
                        return;
                    }

                    // abort previously sent save order request.
                    if (save_request) save_request.abort();
                    // get thr transaction reference
                    var parameters = [];
                    parameters.push('form_key=' + $('[name="form_key"]').val());
                    parameters.push('reference=' + transaction.reference);
                    parameters = parameters.join('&');
                    // update order ajax request callback
                    // sets the success order page redirect url from received data
                    // and calls the final Bolt defined callback
                    var onSuccess = function(data){
                        if (data.status !== 'success') {
                            if (data.message) {
                                showBoltErrorMessage('', data.reference);
                                // pretend order creation was success...
                                // we need to call this; otherwise bolt modal show infinte spinner.
                                callback();
                            }
                            return;
                        }
                        processSuccess(data);
                    };
                    // ajax call to the update order transaction data endpoint.
                    // passes the bolt transaction reference
                    save_request = $.post(settings.save_order_url, parameters)
                                    .done(onSuccess);
                },

                check: function () {
                    /**
                     * On Bolt button click check if guest checkout is allowed.
                     * Display login popup to guest customers if it is not. The
                     * Magento customerData and authenticationPopup objects are
                     * used.
                     */
                    // check if login is required
                    if ( !customer().firstname && !isGuestCheckoutAllowed) {
                        // if authentication is required for checkout set a cookie
                        // for auto opening Bolt checkout after login
                        authenticationPopup.showModal();
                        return false;
                    }
                    // wait for validation module init
                    try {
                        $('#product_addtocart_form').validation('isValid');
                    } catch (e) {
                        return false;
                    }
                    // validate form and show error messages
                    if ( ! $('#product_addtocart_form').validate().form()) {
                        return false;
                    }
                    return true;
                },

                onEmailEnter: function(email) {
                    trackCallbacks.onEmailEnter(email);
                    if (callbacks.email !== email) {
                        $.post(settings.save_email_url, 'email='+encodeURIComponent(email));
                        callbacks.email = email;
                    }
                }
            };

            var getQty = function() {
                var quantity = Number($('#qty').val());
                return quantity > 0 ? quantity : 1;
            };
            <?php if ($block->isSaveHintsInSections()): ?>
            var hintsSection = customerData.get('bolthints');
            var hints = hintsSection.data !== undefined ? hintsSection.data : {};
            customerData.get('bolthints').subscribe(function(newValue) {
                var newHints = newValue.data !== undefined ? newValue.data : {};
                if (JSON.stringify(newHints) !== JSON.stringify(hints)) {
                    hints = newHints;
                    setupProductPage();
                }
            });
            <?php else: ?>
            var hints = new Promise(function (resolve, reject) {
                $.get(settings.get_hints_url)
                    .done(function(data) {
                        resolve(data.hints);
                    })
                    .fail(function() {
                        resolve({prefill:{}});
                    })
                    .always(function() {
                        // dispatch event when required data is ready
                        $(document).trigger('ppc-hints-set');
                    });
            });
            <?php endif; ?>

            var setupProductPage = function () {
                var options = {};
                var compositeAttributes = ['super_attribute', 'options'];
                formData = $("#product_addtocart_form").serializeArray();
                $.each( formData, function( key, input ) {
                    var name = input.name, value = input.value;
                    var matchResult;
                    for (var index in compositeAttributes) {
                        var compositeAttribute = compositeAttributes[index];
                        if (matchResult = name.match(compositeAttribute+'\\[(\\d+)\\]')) {
                            if (!(compositeAttribute in options)) {
                                options[compositeAttribute] = {};
                            }
                            options[compositeAttribute][matchResult[1]] = value;
                            return;
                        }
                    }
                    options[name] = value;
                });
                options['storeId'] = '<?= /* @noEscape */ $block->getStoreId(); ?>';
                var cart = {
                    currency: "<?= /* @noEscape */ $block->getStoreCurrencyCode(); ?>",
                    items: [{
                        reference: '<?= /* @noEscape */ $block->getProduct()->getId(); ?>',
                        price: itemPrice,
                        name: '<?= /* @noEscape */ addcslashes($block->getProduct()->getName(), "'"); ?>',
                        quantity: getQty(),
                        options: JSON.stringify(options)
                    }]
                };

                // if connect.js is not loaded postpone until it is
                whenDefined(window, 'BoltCheckout', function(){
                    BoltCheckout.configureProductCheckout(cart, hints, callbacks);
                });
            };

            setupProductPage();
            $('#qty').on('change', setupProductPage);

            // Object holding the base item price
            // and price deltas for every custom option selected.
            // The properties are added / updated on custom
            // options change in updatePrice event listened below.
            // The final item price is the sum of all prices stored here.
            var itemPrices = {
                basePrice: <?= /* @noEscape */ $block->getProduct()->getFinalPrice(); ?>
            };

            /**
             * Sum the values of all (numeric) object properties
             * @param obj
             * @returns {number}
             */
            var sum = function (obj) {
                return Object.keys(obj).reduce(
                    function(sum,key) {
                        return sum+(parseFloat(obj[key])||0);
                    }, 0
                );
            };

            $(document).on( 'updatePrice', function (event, data) {
                if (data) {
                    // the name of the property that holds the price data
                    // varies depending on the product type, eg. prices, options
                    var key = Object.keys(data)[0];
                    if (key) {
                        var finalPrice = data[key].finalPrice;
                        itemPrices[key] =
                            finalPrice && typeof finalPrice === 'object' && finalPrice.amount ? finalPrice.amount : 0;
                        itemPrice = sum(itemPrices);
                    }
                    setupProductPage();
                }
            });
        });
    </script>