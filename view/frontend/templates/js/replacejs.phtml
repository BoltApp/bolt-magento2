<?php
/**
 * Bolt magento2 plugin
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @category   Bolt
 * @package    Bolt_Boltpay
 * @copyright  Copyright (c) 2018 Bolt Financial, Inc (https://www.bolt.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Replace js template
 * Puts / replaces the checkout buttons according to defined selectors.
 * Maintains Bolt checkout functionality.
 *
 * @var $block \Bolt\Boltpay\Block\Js
 */
if (!$block->isEnabled()) return;
?>

<script type="text/javascript">

    // Store the configuration parameters passed from the php block
    // in the global object. Used in this file and on the payment page
    // in payment method renderer, vendor/boltpay/bolt-magento2/view/frontend/web/js/view/payment/method-renderer/boltpay.js
    window.boltConfig = <?php echo $block->getSettings(); ?>;

    ///////////////////////
    // String.trim Polyfill
    ///////////////////////
    if (!String.prototype.trim) {
        String.prototype.trim = function () {
            return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
        };
    }
    ///////////////////////

    /////////////////////////////////////////////////////////////////////////
    // Using Mutation Observers to Watch for Element Availability and change.
    /////////////////////////////////////////////////////////////////////////
    ! function(win) {

        var listeners = [],
            doc = win.document,
            MutationObserver = win.MutationObserver || win.WebKitMutationObserver,
            observer,
            attribute_listeners = [],
            attribute_observer,
            data_listeners = [],
            data_observer;

        function ready(selector, fn) {
            // Store the selector and callback to be monitored
            listeners.push({
                selector: selector,
                fn: fn
            });
            if (!observer) {
                // Watch for changes in the document
                observer = new MutationObserver(check);
                observer.observe(doc.documentElement, {
                    childList: true,
                    subtree: true
                });
            }
            // Check if the element is currently in the DOM
            check();
        }

        function check() {
            // Check the DOM for elements matching a stored selector
            for (var i = 0, len = listeners.length, listener, elements; i < len; i++) {
                listener = listeners[i];
                // Query for elements matching the specified selector
                elements = doc.querySelectorAll(listener.selector);
                for (var j = 0, jLen = elements.length, element; j < jLen; j++) {
                    element = elements[j];
                    // Make sure the callback isn't invoked with the
                    // same element more than once
                    if (!element.ready) {
                        element.ready = true;
                        // Invoke the callback with the element
                        listener.fn.call(element, element);
                    }
                }
            }
        }

        function attributes_change(selector, fn) {
            // Store the selector and callback to be monitored
            attribute_listeners.push({
                selector: selector,
                fn: fn
            });
            if (!attribute_observer) {
                // Watch for attribut changes in the document
                attribute_observer = new MutationObserver(check_attributes);
                var config = {
                    attributes: true,
                    subtree: true
                };
                attribute_observer.observe(doc.documentElement, config);
            }
        }

        function check_attributes() {
            // Check the DOM for elements matching a stored selector
            for (var i = 0, len = attribute_listeners.length, listener, elements; i < len; i++) {
                listener = attribute_listeners[i];
                // Query for elements matching the specified selector
                elements = doc.querySelectorAll(listener.selector);
                for (var j = 0, jLen = elements.length, element; j < jLen; j++) {
                    element = elements[j];
                    // Invoke the callback with the element
                    listener.fn.call(element, element);
                }
            }
        }

        function data_change(selector, fn) {
            // Store the selector and callback to be monitored
            data_listeners.push({
                selector: selector,
                fn: fn
            });
            if (!data_observer) {
                // Watch for data changes in the document
                data_observer = new MutationObserver(check_data);
                var config = {
                    characterData: true,
                    subtree: true
                };
                data_observer.observe(doc.documentElement, config);
            }
        }

        function check_data() {
            // Check the DOM for elements matching a stored selector
            for (var i = 0, len = data_listeners.length, listener, elements; i < len; i++) {
                listener = data_listeners[i];
                // Query for elements matching the specified selector
                elements = doc.querySelectorAll(listener.selector);
                for (var j = 0, jLen = elements.length, element; j < jLen; j++) {
                    element = elements[j];
                    // Invoke the callback with the element
                    listener.fn.call(element, element);
                }
            }
        }

        // Expose methods
        win.onElementReady     = ready;
        win.onAttributesChange = attributes_change;
        win.onDataChange       = data_change;

    }(window);
    ////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////////////////////////
    // Trim certain characters from a string in JavaScript
    ////////////////////////////////////////////////////////////////////////
    var trim = (function () {

        function escapeRegex(string) {
            return string.replace(/[\[\](){}?*+\^$\\.|\-]/g, "\\$&");
        }

        return function trim(str, characters, flags) {
            flags = flags || "g";
            if (typeof str !== "string" || typeof characters !== "string" || typeof flags !== "string") {
                throw new TypeError("argument must be string");
            }

            if (!/^[gi]*$/.test(flags)) {
                throw new TypeError("Invalid flags supplied '" + flags.match(new RegExp("[^gi]*")) + "'");
            }

            characters = escapeRegex(characters);

            return str.replace(new RegExp("^[" + characters + "]+|[" + characters + "]+$", flags), '');
        };
    }());
    ////////////////////////////////////////////////////////////////////////

    ////////////////////////////////////////////////////
    // DI: Inserting required Magento objects
    // the code below is dependant on.
    ////////////////////////////////////////////////////
    require([
        'jquery',
        'Magento_Customer/js/model/authentication-popup',
        'Magento_Customer/js/customer-data',
        'mage/validation/validation'
    ], function ($, authenticationPopup, customerData) {
    ////////////////////////////////////////////////////

        ////////////////////////////////
        // Merge objects
        ////////////////////////////////
        var isObject = function (item) {
            return (item && typeof item === 'object' && !Array.isArray(item));
        };

        var deepMergeObjects = function () {

            // Variables
            var extended = {};
            var i = 0;

            // Merge the object into the extended object
            var merge = function (obj) {

                for (var prop in obj) {

                    if (obj.hasOwnProperty(prop)) {
                        if (isObject(obj[prop])) {
                            // If the property is an object
                            extended[prop] = deepMergeObjects(extended[prop], obj[prop]);
                        } else {
                            // Otherwise, do a regular merge
                            extended[prop] = obj[prop];
                        }
                    }
                }

            };

            // Loop through each object and conduct a merge
            for (; i < arguments.length; i++) {
                merge(arguments[i]);
            }

            return extended;
        };
        ////////////////////////////////

        /**
         * Pure javascript ajax POST request function
         *
         * param string     url                 The request url
         * param array      params              The URL query string parameters
         * param callable   callback            The callback function to pass the response data to
         *
         * return XMLHttpRequest|ActiveXObject('Microsoft.XMLHTTP')
         */
        var ajaxPost = function(url, params, onSuccess, onError, async, headers) {
            var xhr;
            if (typeof async === 'undefined') async = true;
            if (typeof headers === 'undefined') {
                headers = {'Content-Type': 'application/x-www-form-urlencoded'};
            }
            xhr = window.XMLHttpRequest ? new XMLHttpRequest() : new ActiveXObject('Microsoft.XMLHTTP');
            if (typeof onSuccess === 'function') {
                xhr.onload = function () {
                    var result;
                    if (xhr.responseType === 'json') {
                        result = xhr.response;
                    } else {
                        result = JSON.parse(xhr.responseText);
                    }
                    onSuccess(result);
                };
            }
            if (typeof onError === 'function') {
                xhr.onerror = onError;
            }
            xhr.open('POST', url, async);
            xhr.setRequestHeader('X-Requested-With', 'XMLHttpRequest');
            for (var header in headers) {
                if (headers.hasOwnProperty(header)) {
                    xhr.setRequestHeader(header, headers[header]);
                }
            }
            xhr.send(params);
            return xhr;
        };

        /**
         * Get the current page checkout type.
         * This function should be extended for Magento checkout extensions.
         *
         * return string
         */
        var getCheckoutType = function() {
            return trim(location.pathname, '/') === 'checkout' && (settings.quote_is_virtual || location.hash === '#payment') ? 'payment' : 'checkout';
        };

        /**
         * Get the checkout key according to the checkout type.
         *
         * return string
         */
        var getCheckoutKey = function () {
            var key = 'publishable_key_' + getCheckoutType();
            return settings[key];
        };

        /**
         * Apply function to every element with the specified selector.
         *
         * param selector   elements CSS selector
         * param fn         function to apply
         *
         * return void
         */
        var selectorApply = function(selector, fn){
            var elements = document.querySelectorAll(selector);
            for (var i = 0, length = elements.length; i < length; i++) {
                var element = elements[i];
                fn.call(element, element);
            }
        };

        /**
         * Apply function to every bolt checkout button.
         *
         * param fn         function to apply
         *
         * return void
         */
        var checkoutButtonApply = function(fn) {
            selectorApply(bolt_button_selector, fn);
        };

        /**
         * Toggle checkout button multi-step class, `bolt-multi-step-checkout`, according to the checkout type.
         *
         * return void
         */
        var setCheckoutTypeStyle = function() {
            var checkout_type = getCheckoutType();
            checkoutButtonApply(function(button) {
                if (checkout_type === 'payment') {
                    button.classList.remove(multi_step_css_class);
                } else {
                    button.classList.add(multi_step_css_class);
                }
            });
        };

        /**
         * Inject connect.js
         * return void
         */
        var insertConnectScript = function() {
            var scriptTag = document.getElementById('bolt-connect');
            var publishableKey = getCheckoutKey();
            if (scriptTag) {
                scriptTag.setAttribute('data-publishable-key', publishableKey);
                createOrder();
                return;
            }
            scriptTag = document.createElement('script');
            scriptTag.setAttribute('type', 'text/javascript');
            scriptTag.setAttribute('async', '');
            scriptTag.setAttribute('src', settings.connect_url);
            scriptTag.setAttribute('id', 'bolt-connect');
            scriptTag.setAttribute('data-publishable-key', publishableKey);
            scriptTag.onload = createOrder;
            document.head.appendChild(scriptTag);
        };

        /**
         * Set checkout button CSS and load connect.js
         * return void
         */
        var processButtons = function () {
            if (getCheckoutKey() !== '') {
                setCheckoutTypeStyle();
                insertConnectScript();
            }
        };

        // The configuration parameters passed from the php block
        var settings = window.boltConfig;
        // TODO: make `with-cards` option backend configurable
        var bolt_button_css_class    = 'bolt-checkout-button with-cards';
        var bolt_button_selector     = '.bolt-checkout-button';
        var multi_step_css_class     = 'bolt-multi-step-checkout';
        var billing_address_selector = '#bolt-billing-address';
        var place_order_payload_id   = 'bolt-place-order-payload';
        var bolt_clickable_selector  = '.bolt-checkout-button-button';
        var customer_email_selector  = '#customer-email';

        // On multiple checkout open/close actions the success event remains registered
        // resulting in making the success call multiple times. This variable stores
        // the last request to be aborted before new one is sent.
        var save_request;

        ////////////////////////////////////
        // BoltCheckout.configure parameters
        ////////////////////////////////////
        var cart = {orderToken:''};

        var hints = {prefill:{}};

        var callbacks = {

            close: function () {
                // redirect on succes order save
                if (callbacks.success_url) location.href = callbacks.success_url;
            },

            success: function (transaction, callback) {
                // abort previously sent save order request.
                if (save_request) save_request.abort();
                // get thr transaction reference
                var parameters = 'reference='+transaction.reference;
                // update order ajax request callback
                // sets the success order page redirect url from received data
                // and calls the final Bolt defined callback
                var onSuccess = function(data){

                    // show alert message on error
                    if (data.status !== 'success') {
                        if (data.message) {
                            console.log(data.message);
                            alert(data.message);
                        }
                        return false;
                    }

                    <?php echo $block->getjavascriptSuccess(); ?>
                    callbacks.success_url = data.success_url;
                    callback();
                };
                // ajax call to the update order transaction data endpoint.
                // passes the bolt transaction reference
                save_request = ajaxPost(settings.save_order_url, parameters, onSuccess);
            },

            check: function () {

                if (createRequest || !cart.orderToken) {
                    console.log("Retrieving order token from server... not ready to checkout yet.");
                    return false;
                }

                /**
                 * On Bolt button click check if guest checkout is allowed.
                 * Display login popup to guest customers if it is not. The
                 * Magento customerData and authenticationPopup objects are
                 * used.
                 */
                var customer = customerData.get('customer');
                var shoppingCart = customerData.get('cart');
                if (!customer().firstname && shoppingCart().isGuestCheckoutAllowed === false) {
                    authenticationPopup.showModal();
                    return false;
                }

                /**
                 * On Magento checkout page - Bolt payment only checkout
                 * trigger click on boltpay radio if the button clicked is
                 * in minicart panel or other (voluntary) location
                 * and trigger email validation.
                 */
                if (getCheckoutType() === 'payment') {

                    // trigger click on boltpay radio
                    if ($('#boltpay').prop('checked') === false) $('#boltpay').click();

                    // stop if customer email field exists and is not valid on paymtnt only page
                    var customer_email = $(customer_email_selector);
                    if (customer_email.get(0)) {
                        var form = customer_email.closest('form');
                        if (form.validation() && form.validation('isValid') === false) {
                            customer_email.get(0).scrollIntoView();
                            return false;
                        }
                    }
                }

                return true;
            },

            onEmailEnter: function(email) {
                if (callbacks.email !== email) {
                    ajaxPost(settings.save_email_url, 'email='+encodeURIComponent(email));
                    callbacks.email = email;
                }
            }
        };
        ////////////////////////////////////

        /////////////////////////////////////////////////////
        // Call Shipping and Tax prefetch & cache endpoint
        /////////////////////////////////////////////////////
        // array to store sent requests
        var prefetch_list = [];
        var prefetchShipping = function() {

            if (!settings.prefetch_shipping || !cart.cartReference) return;

            var params = 'cartReference='+cart.cartReference;

            // parse Estimate Shipping and Tax location fields
            var country  = $('select[name=country_id]').val(),
                region   = $('select[name=region_id] option:selected').text(),
                postcode = $('input[name=postcode]').val();

            if (country && region && postcode) {
                params += '&country='+country+'&region='+region+'&postcode='+postcode;
            }
            // do not run the same request twice
            if (prefetch_list.indexOf(params) == -1) {
                prefetch_list.push(params);
                ajaxPost(settings.shipping_prefetch_url, params);
            }
        };
        /////////////////////////////////////////////////////

        /////////////////////////////////////////////////////
        // Create Bolt order and configure BoltCheckout
        /////////////////////////////////////////////////////
        var createRequest;
        var createOrder = function () {
            if (createRequest) createRequest.abort();
            // define the params sent with the request variable
            var params = [];

            // check and set payment_only flag
            if (getCheckoutType() === 'payment') {

                // stop if customer email field is present and invalid
                var customer_email = $(customer_email_selector);
                var form = customer_email.closest('form');
                if (typeof customer_email.val() !== 'undefined'
                    && (customer_email.val().trim() === ''
                        || (form.validation() && form.validation('isValid') === false)
                )) return;

                if (settings && !!settings.publishable_key_payment) {
                    params.push('payment_only=true');
                } else {
                    return;
                }

                // get additional page data to be sent with the request,
                // one page checkout billing info, email, ...
                var place_order_payload = document.getElementById(place_order_payload_id);
                if (place_order_payload && place_order_payload.value) {

                    // stop if customer billing address is not set
                    if ($(billing_address_selector).val() === 'null') return;

                    // decode payload json string
                    var place_order_payload_obj = JSON.parse(place_order_payload.value);

                    // delete redundant title property
                    if (place_order_payload_obj.paymentMethod) {
                        delete place_order_payload_obj.paymentMethod.title;
                    }

                    // update payload email, use the value from the page
                    if (customer_email.val()) {
                        place_order_payload_obj.email = customer_email.val();
                    }
                    place_order_payload.value = JSON.stringify(place_order_payload_obj);

                    params.push('place_order_payload=' + place_order_payload.value);
                }
            }
            params = params.join('&');
            if (params === '') params = null;
            // set cart and hints data in a response callback
            var onSuccess = function(data){
                cart = data.cart;
                createRequest = null;

                var prefill = isObject(data.hints.prefill) ? deepMergeObjects(hints.prefill, data.hints.prefill) : hints.prefill;
                hints = deepMergeObjects(hints, data.hints);
                hints.prefill = prefill;

                hints.publishableKey = getCheckoutKey();

                if (window.BoltCheckout) BoltCheckout.configure(cart, hints, callbacks);

                // prefetch Shipping and Tax for multi-step checkout
                if (getCheckoutType() === 'checkout') prefetchShipping();
            };
            var onError = function(error) {
                createRequest = null;
            };
            // send create order request
            createRequest = ajaxPost(settings.create_order_url, params, onSuccess, onError);
        };
        /////////////////////////////////////////////////////

        /////////////////////////////////////////////////////
        // Call Bolt order creation Magento endpoint on
        // customer billing address change on payment only page,
        // storing the live page data in Bolt cart.
        /////////////////////////////////////////////////////
        var billing_address_value;
        onAttributesChange(billing_address_selector, function(element) {

            var checkout_type = getCheckoutType();
            var address = element.value;
            if (checkout_type !== 'payment' || address === 'null') return;

            if (address !== billing_address_value) {
                billing_address_value = address;
                createOrder();
            }

        });
        /////////////////////////////////////////////////////

        /////////////////////////////////////////////////////
        // Call Bolt order creation Magento endpoint on
        // customer email change on payment only page, storing
        // the live page data in Bolt cart.
        /////////////////////////////////////////////////////
        var customer_email_value;
        onAttributesChange(customer_email_selector, function(element) {

            var checkout_type = getCheckoutType();
            var email = element.value.trim();
            if (checkout_type !== 'payment'|| email === "") return;

            if (email !== customer_email_value) {
                customer_email_value = email;
                createOrder();
            }
        });
        /////////////////////////////////////////////////////

        /////////////////////////////////////////////////////
        // Flag that is true if checkout buttons exists on the page
        var checkout_buttons = false;
        ////////////////////////////////////////////////
        // process the button when available on the page
        ////////////////////////////////////////////////
        onElementReady(bolt_button_selector, function(element) {
            checkout_buttons = true;
            processButtons();
        });
        ////////////////////////////////////////////////

        //////////////////////////////////////////////////////////
        // loop through selectors array and set up the replacement
        //////////////////////////////////////////////////////////
        for (var i = 0, length = settings.selectors.length; i < length; i++) {
            var selector = settings.selectors[i];
            ! function(selector) {
                var parts = selector.split('|');
                // the CSS selector
                var identifier = parts[0].trim();
                // button placement regarding the selector element, prepend, append
                var position =  parts[1];
                /////////////////////////////////////////////////////
                // replace the selectors with bolt button identifiers
                // if / when selectors are in the DOM
                /////////////////////////////////////////////////////
                onElementReady(identifier, function(element) {
                    if (getCheckoutKey() === '') return;
                    var bolt_button = document.createElement('div');
                    bolt_button.setAttribute('class', bolt_button_css_class);
                    // place the button before or after selector element
                    if (position && position.trim().toLowerCase() === 'append') {
                        element.parentNode.insertBefore(bolt_button, element.nextSibling);
                    } else {
                        element.parentNode.insertBefore(bolt_button, element);
                    }
                    // if no position is specified remove the selector element
                    if (!position) {
                        element.parentNode.removeChild(element);
                    }
                });
                /////////////////////////////////////////////////////
            }(selector);
        }
        //////////////////////////////////////////////////////////

        ////////////////////////////////////////////////////////
        // on hash change reprocess the buttons due to
        // possible transition from one checkout type to another
        ////////////////////////////////////////////////////////
        window.addEventListener('hashchange', function() {
            if (checkout_buttons) {
                checkoutButtonApply(function(button) {
                    button.style.display = '';
                });
                processButtons();
            }
        });
        ////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////
        // Run function fn on element underlying data change
        ///////////////////////////////////////////////////////////
        var monitorDataChange = function(selectors, fn, non_empty, visible_only) {
            for (var i = 0, length = selectors.length; i < length; i++) {

                var selector = selectors[i];

                ! function(selector) {

                    onElementReady(selector, function(el) {
                        var value = el.textContent;
                        onDataChange(selector, function(element) {
                            if (visible_only && element.offsetParent === null) return;
                            if (element.textContent !== value) {
                                value = element.textContent;
                                if (non_empty && !value) return;
                                fn(element);
                            }
                        });
                    });

                }(selector);
            }
        };
        ///////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////
        // Run function fn on element attributes change
        ///////////////////////////////////////////////////////////
        var monitorAttributesChange = function(selectors, fn, on_ready, visible_only) {
            for (var i = 0, length = selectors.length; i < length; i++) {

                var selector = selectors[i];

                ! function(selector) {

                    onElementReady(selector, function(el) {
                        if (on_ready) fn(el);
                        var value = el.value;
                        onAttributesChange(selector, function(element) {
                            if (visible_only && element.offsetParent === null) return;
                            if (element.value !== value) {
                                value = element.value;
                                fn(element);
                            }
                        });
                    });

                }(selector);
            }
        };
        ///////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////////
        // Monitor DOM element showing grand total / cart item number
        // and trigger Bolt order creation on totals change. This event
        // happens when discounts are added / removed from the page and
        // totals updated or items added via ajax call.
        // TODO: add this option to plugin configuration admin page
        ///////////////////////////////////////////////////////////////
        var totals_change_selectors = [
            'tr.grand.totals td.amount span.price',
            'tr.shipping.totals td.amount span.price',
            '.minicart-wrapper .counter.qty span.counter-number'
        ];
        ///////////////////////////////////
        monitorDataChange(totals_change_selectors, createOrder, true, true);
        ///////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////
        // Reconfigure BoltCheckout with page collected hints data
        ///////////////////////////////////////////////////////////
        var old_hints;
        var configureHints = function() {

            // wait 3 seconds for the field(s) to be fully filled,
            // do not react on every keypress
            setTimeout(

                function() {

                    var new_hints = JSON.stringify(hints);

                    if (old_hints !== new_hints && window.BoltCheckout) {

                        BoltCheckout.configure(cart, hints, callbacks);
                        old_hints = new_hints;
                    }
                },
                3000
            );
        };
        ///////////////////////////////////////////////////////////

        // Map from address input field names to hints.prefill keys
        var input_name_to_hints_prefill = {
            'firstname': 'firstName',
            'lastname':  'lastName',
            'username':  'email',
            'telephone': 'phone',
            'street[0]': 'addressLine1',
            'street[1]': 'addressLine2',
            'city':      'city',
            'postcode':  'zip'
        };

        // CSS selectors of the hints prefill elements parents
        // used to distinct hints related fields from others with the same name
        var input_name_to_hints_prefill_prefixes = [
            '.fieldset.estimate',
            '#checkout-step-shipping'
        ];

        /////////////////////////////////////////////////////////////////////
        // Monitor address text input fields and update hints on value change
        /////////////////////////////////////////////////////////////////////
        for (var i = 0, length = input_name_to_hints_prefill_prefixes.length; i < length; i++) {

            var prefix = input_name_to_hints_prefill_prefixes[i];

            ! function (prefix) {

                for (var input_name in input_name_to_hints_prefill) {

                    if (input_name_to_hints_prefill.hasOwnProperty(input_name)) {

                        ! function (input_name) {

                            var prefill_key = input_name_to_hints_prefill[input_name];
                            var input_selectors = [prefix + ' input[name="' + input_name + '"]'];

                            monitorAttributesChange(input_selectors, function(element) {
                                hints.prefill[prefill_key] = element.value;

                                configureHints();
                            });

                        } (input_name);
                    }
                }

            } (prefix);
        }
        /////////////////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////
        // Monitor Country DOM element change and update hints
        ///////////////////////////////////////////////////////////
        var country_selectors = ['select[name=country_id]'];
        monitorAttributesChange(country_selectors, function(element) {
            if (!element.value) {
                delete hints.prefill.country;
            }
            else {
                hints.prefill.country = element.value;
            }
            delete hints.prefill.state;

            configureHints();
        }, true);
        ///////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////
        // Monitor State DOM element change and update hints
        ///////////////////////////////////////////////////////////
        var state_selectors = ['select[name=region_id]'];
        monitorAttributesChange(state_selectors, function(element) {
            if (!element.value) {
                delete hints.prefill.state;
            }
            else {
                hints.prefill.state = element.options[element.selectedIndex].text;
            }

            configureHints();
        });
        ///////////////////////////////////////////////////////////

        ///////////////////////////////////////////////////////////
        // Call prefetch shipping on shipping optioins field change
        ///////////////////////////////////////////////////////////
        monitorDataChange(['fieldset.fieldset.rate'], prefetchShipping, false, false);
        ///////////////////////////////////////////////////////////
    });
    
    <?php echo $block->getAdditionalJavascript(); ?>
</script>

<style>
    <?php echo $block->getGlobalCSS(); ?>
</style>
