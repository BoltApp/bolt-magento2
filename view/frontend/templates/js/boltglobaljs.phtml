<?php
/**
 * Bolt magento2 plugin
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @category   Bolt
 * @package    Bolt_Boltpay
 * @copyright  Copyright (c) 2020 Bolt Financial, Inc (https://www.bolt.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Replace js template
 * Puts / replaces the checkout buttons according to defined selectors.
 * Maintains Bolt checkout functionality.
 *
 * @var $block \Bolt\Boltpay\Block\Js
 */
if ($block->shouldDisableBoltCheckout()) return;

//check if we need Bolt on this page
if (!$block->isOnPageFromWhiteList() && !$block->isMinicartEnabled() && !$block->isBoltProductPage()) return;

$trackCallbackCode = $block->getTrackCallbacks();

function wrapWithCatch($jsCode, $argName='') {
echo "
function($argName) {
    try {
        $jsCode
    } catch (error) {
        console.error(error);
    }
}";
}

ob_start();
?>
<script type="text/javascript">
    // Store the configuration parameters passed from the php block
    // in the global object. Used in this file and on the payment page
    // in payment method renderer, vendor/boltpay/bolt-magento2/view/frontend/web/js/view/payment/method-renderer/boltpay.js
    window.boltConfig = <?php echo $block->getSettings(); ?>;

    window.boltConfig.trackCallbacks = {
        onCheckoutStart: <?php wrapWithCatch($trackCallbackCode['checkout_start']); ?>,
        onEmailEnter: <?php wrapWithCatch($trackCallbackCode['email_enter'], 'email'); ?>,
        onShippingDetailsComplete: <?php wrapWithCatch($trackCallbackCode['shipping_details_complete']); ?>,
        onShippingOptionsComplete: <?php wrapWithCatch($trackCallbackCode['shipping_options_complete']); ?>,
        onPaymentSubmit: <?php wrapWithCatch($trackCallbackCode['payment_submit']); ?>,
        onSuccess: <?php wrapWithCatch( $block->getJavascriptSuccess() . $trackCallbackCode['success'], 'data') ?>,
        onClose: <?php wrapWithCatch($trackCallbackCode['close']); ?>,
    };
    
    ////////////////////////////////////////////////////////////////////////
    // Wait for an object to be defined and
    // execute a callback when it becomes available
    ////////////////////////////////////////////////////////////////////////
    window.whenDefined = function(obj, property, callback) {
        if (obj[property]) {
            callback();
        } else {
            var prop = '_'+property;
            Object.defineProperty(obj, property, {
                configurable: true,
                enumerable: true,
                writeable: true,
                get: function() {
                    return this[prop];
                },
                // calls callback when variable is set
                set: function(value) {
                    this[prop] = value;
                    callback();
                }
            });
        }
    };
    ////////////////////////////////////////////////////////////////////////
</script>
<?php
$js = ob_get_clean();
echo $block->minifyJs($js);
?>
