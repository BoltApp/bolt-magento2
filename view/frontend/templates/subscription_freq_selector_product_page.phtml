<?php
/**
 * Bolt magento2 plugin
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @category   Bolt
 * @package    Bolt_Boltpay
 * @copyright  Copyright (c) 2017-2022 Bolt Financial, Inc (https://www.bolt.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

// return if PDP FS option is disabled or we aren't on product page
if (!$block->isBoltProductPageForFrequencySelector()) { return;
}
?>


<!--
    We will potentially embed the frequency selector into this selector.
    If product is subscribable - it will load the frequency options
    If not - it will load nothing (empty div)
 -->
<div class="bolt-freq-selector"></div>

<script>
    require([
        'jquery',
        'Magento_Customer/js/model/authentication-popup',
        'Magento_Customer/js/customer-data',
        'Bolt_Boltpay/js/utils/when-defined',
        'mage/validation/validation',
        'mage/cookies',
        'jquery/jquery.cookie',
        'domReady!'
    ], function ($, authenticationPopup, customerData, whenDefined) {

        var callbacks = {
            /**
             * This callback is triggered by the frequency selector's onChange
             * User has selected a different frequency
             * 
             * We update the localStorage value that is accessible when shopper checks out
             * LocalStorage value is a dictionary with
             * - key as merchant product id ("reference" here)
             * - value is the selected frequency (value, unit eg: 2, 'weeks')
             */
            onSubscriptionChanged: function(reference, frequency) {
                console.log("subscription frequency changed! ", reference, frequency);
                const frequencies = JSON.parse(localStorage.getItem("BOLT_SUBSCRIPTION_PDP")) ?? {}
                if (!frequency) {
                    delete frequencies[reference]
                } else {
                    const { unit, value } = frequency
                    frequencies[reference] = {
                        unit,
                        value
                    }
                }
                localStorage.setItem("BOLT_SUBSCRIPTION_PDP", JSON.stringify(frequencies))
            }
        }

        /**
         * Below are util funcs used to retrieve full product info
         * referenced from button_product_page.phtml
         */
        var getQty = function () {
            var quantity = Number($('#qty').val());
            return quantity > 0 ? quantity : 1;
        }

        var getGroupedProductChildQty = function () {
            return Number($('input[name="super_group['+productId+']').val());
        }

        var getItemsData = function () {
            var options = {};
                var compositeAttributes = ['super_attribute', 'options', 'bundle_option', 'bundle_option_qty'];
                var checkboxAttributes = ['links'];
                formData = $("#product_addtocart_form").serializeArray();
                $.each( formData, function( key, input ) {
                    var name = input.name, value = input.value;
                    var matchResult;
                    for (var index in compositeAttributes) {
                        if (!compositeAttributes.hasOwnProperty(index)) {
                            continue;
                        }
                        var compositeAttribute = compositeAttributes[index];
                        if (matchResult = name.match(compositeAttribute+'\\[(\\d+)\\]')) {
                            if (!(compositeAttribute in options)) {
                                options[compositeAttribute] = {};
                            }
                            if (matchResult[1] in options[compositeAttribute]
                                && options[compositeAttribute][matchResult[1]]) {
                                options[compositeAttribute][matchResult[1]] += ',' + value;
                            } else {
                                options[compositeAttribute][matchResult[1]] = value;
                            }
                            return;
                        }
                    }
                    for (var index in checkboxAttributes) {
                        if (!checkboxAttributes.hasOwnProperty(index)) {
                            continue;
                        }
                        var checkboxAttribute = checkboxAttributes[index];
                        if (name === checkboxAttribute+'[]') {
                            if (!(checkboxAttribute in options)) {
                                options[checkboxAttribute] = [];
                            }
                            options[checkboxAttribute].push(value);
                            return;
                        }
                    }

                    options[name] = value;
                });
                options['storeId'] = '<?= /* @noEscape */ $block->getStoreId(); ?>';
                var formKey = $.mage.cookies.get('form_key');
                if (!formKey && $('[name="form_key"]').length) {
                    formKey = $('[name="form_key"]').val();
                }
                options['form_key'] = formKey;
                var items = [];
                <?php if ($block->isGrouped()): ?>
                    <?php foreach ($block->getGroupedProductChildren() as $childProduct):?>
                        var childProductQty = getGroupedProductChildQty(<?= /* @noEscape */ $childProduct->getId(); ?>);
                        if (childProductQty > 0) {
                            <?php if ($childProduct->isVirtual()): ?>
                                var productType = 'digital';
                            <?php else: ?>
                                var productType = 'physical';
                            <?php endif; ?>
                            items.push({
                                reference: '<?= /* @noEscape */ $childProduct->getId(); ?>',
                                price: '<?= /* @noEscape */ $childProduct->getPrice() ?>',
                                name: '<?= /* @noEscape */ addcslashes($childProduct->getName(), "'"); ?>',
                                quantity: childProductQty,
                                options: JSON.stringify(options),
                                type: productType
                            });
                        }
                    <?php endforeach; ?>
                <?php else: ?>
                    <?php if ($block->getProduct()->isVirtual()): ?>
                        var productType = 'digital';
                    <?php else: ?>
                        var productType = 'physical';
                    <?php endif; ?>
                    items.push({
                        reference: '<?= /* @noEscape */ $block->getProduct()->getId(); ?>',
                        price: <?= /* @noEscape */ $block->getProduct()->getFinalPrice(); ?>,
                        name: '<?= /* @noEscape */ addcslashes($block->getProduct()->getName(), "'"); ?>',
                        quantity: getQty(),
                        options: JSON.stringify(options),
                        type: productType
                    });
                <?php endif; ?>

                return items;
        };

        var cart;
        var setupProductPage = function () {
            cart = {
                items: getItemsData()
            };

            // if connect.js is not loaded postpone until it is
            whenDefined(window, 'BoltCheckout', function(){
                BoltCheckout.configureProductFrequencySelector(cart, null, callbacks);
            }, 'configureProductFrequencySelector');
        };

        setupProductPage();
    });
</script>
