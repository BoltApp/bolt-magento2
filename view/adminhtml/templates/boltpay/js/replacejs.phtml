<?php
/**
 * Bolt magento2 plugin
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 *
 * @category   Bolt
 * @package    Bolt_Boltpay
 * @copyright  Copyright (c) 2017-2020 Bolt Financial, Inc (https://www.bolt.com)
 * @license    http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */

/**
 * Replace js template
 * Puts / replaces the checkout buttons according to defined selectors.
 * Maintains Bolt checkout functionality.
 *
 * @var $block \Bolt\Boltpay\Block\Js
 */
if (!$block->isEnabled()) { return;
}
?>

<script type="text/javascript">

// If we have multi-website, we need current quote store_id
// Store the configuration parameters passed from the php block
// in the global object. Used in this file and on the payment page
// in payment method renderer, vendor/boltpay/bolt-magento2/view/frontend/web/js/view/payment/method-renderer/boltpay.js
window.boltConfig = <?= /* @noEscape */ $block->getSettings(); ?>;

///////////////////////
// String.trim Polyfill
///////////////////////
if (!String.prototype.trim) {
    String.prototype.trim = function () {
        return this.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, '');
    };
}
///////////////////////

/////////////////////////////////////////////////////////////////////////
// Using Mutation Observers to Watch for Element Availability and change.
/////////////////////////////////////////////////////////////////////////
! function(win) {

    var listeners = [],
        doc = win.document,
        MutationObserver = win.MutationObserver || win.WebKitMutationObserver,
        observer,
        attribute_listeners = [],
        attribute_observer,
        data_listeners = [],
        data_observer;

    function ready(selector, fn) {
        // Store the selector and callback to be monitored
        listeners.push({
            selector: selector,
            fn: fn
        });
        if (!observer) {
            // Watch for changes in the document
            observer = new MutationObserver(check);
            observer.observe(doc.documentElement, {
                childList: true,
                subtree: true
            });
        }
        // Check if the element is currently in the DOM
        check();
    }

    function check() {
        // Check the DOM for elements matching a stored selector
        for (var i = 0, len = listeners.length, listener, elements; i < len; i++) {
            listener = listeners[i];
            // Query for elements matching the specified selector
            elements = doc.querySelectorAll(listener.selector);
            for (var j = 0, jLen = elements.length, element; j < jLen; j++) {
                element = elements[j];
                // Make sure the callback isn't invoked with the
                // same element more than once
                if (!element.ready) {
                    element.ready = true;
                    // Invoke the callback with the element
                    listener.fn.call(element, element);
                }
            }
        }
    }

    function attributes_change(selector, fn) {
        // Store the selector and callback to be monitored
        attribute_listeners.push({
            selector: selector,
            fn: fn
        });
        if (!attribute_observer) {
            // Watch for attribut changes in the document
            attribute_observer = new MutationObserver(check_attributes);
            var config = {
                attributes: true,
                subtree: true
            };
            attribute_observer.observe(doc.documentElement, config);
        }
    }

    function check_attributes() {
        // Check the DOM for elements matching a stored selector
        for (var i = 0, len = attribute_listeners.length, listener, elements; i < len; i++) {
            listener = attribute_listeners[i];
            // Query for elements matching the specified selector
            elements = doc.querySelectorAll(listener.selector);
            for (var j = 0, jLen = elements.length, element; j < jLen; j++) {
                element = elements[j];
                // Invoke the callback with the element
                listener.fn.call(element, element);
            }
        }
    }

    function data_change(selector, fn) {
        // Store the selector and callback to be monitored
        data_listeners.push({
            selector: selector,
            fn: fn
        });
        if (!data_observer) {
            // Watch for data changes in the document
            data_observer = new MutationObserver(check_data);
            var config = {
                characterData: true,
                subtree: true
            };
            data_observer.observe(doc.documentElement, config);
        }
    }

    function check_data() {
        // Check the DOM for elements matching a stored selector
        for (var i = 0, len = data_listeners.length, listener, elements; i < len; i++) {
            listener = data_listeners[i];
            // Query for elements matching the specified selector
            elements = doc.querySelectorAll(listener.selector);
            for (var j = 0, jLen = elements.length, element; j < jLen; j++) {
                element = elements[j];
                // Invoke the callback with the element
                listener.fn.call(element, element);
            }
        }
    }

    // Expose methods
    win.onElementReady     = ready;
    win.onAttributesChange = attributes_change;
    win.onDataChange       = data_change;

}(window);
////////////////////////////////////////////////////////////////////////

require([
    'jquery'
], function ($) {

    ////////////////////////////////
    // Merge objects
    ////////////////////////////////
    var isObject = function (item) {
        return (item && typeof item === 'object' && !Array.isArray(item));
    };

    var deepMergeObjects = function () {

        // Variables
        var extended = {},
            i = 0;

        // Merge the object into the extended object
        var merge = function (obj) {
            for (var prop in obj) {

                if (obj.hasOwnProperty(prop)) {
                    if (isObject(obj[prop])) {
                        // If the property is an object
                        extended[prop] = deepMergeObjects(extended[prop], obj[prop]);
                    } else {
                        // Otherwise, do a regular merge
                        extended[prop] = obj[prop];
                    }
                }
            }
        };

        // Loop through each object and conduct a merge
        for (; i < arguments.length; i++) {
            merge(arguments[i]);
        }

        return extended;
    };
    ////////////////////////////////

    /**
     * Get the current page checkout type.
     * This function should be extended for Magento checkout extensions.
     *
     * return string
     */
    var getCheckoutType = function() {
        return 'payment';
    };

    /**
     * Inject connect.js
     * return void
     */
    var insertConnectScript = function(publishableKey) {
        var scriptTag = document.getElementById('bolt-connect');
        if (scriptTag) {
            BoltCheckout.configure(cart, hints, callbacks);
            return;
        }
        if (!publishableKey) {
            console.error('No publishable key set');
            return;
        }
        scriptTag = document.createElement('script');
        scriptTag.setAttribute('type', 'text/javascript');
        scriptTag.setAttribute('src', settings.connect_url);
        scriptTag.setAttribute('id', 'bolt-connect');
        scriptTag.setAttribute('data-publishable-key', publishableKey);
        scriptTag.onload = function() {BoltCheckout.configure(cart, hints, callbacks);}

        // Due to a conflict between Magento and Bolt polyfill of Map class we use an intermediary constructor
        // to negate conflicting change to the class constructor
        if (window.isMapPolyfilled) {
            var originalMap = Map;
            var originalConstructor = Map.prototype.constructor;
            function boltMap() {
                this.constructor = originalConstructor;
                originalMap.apply(this, arguments);
                this.constructor = boltMap;
            }
            boltMap.prototype = originalMap.prototype;
            Map = boltMap;
        }
        document.head.appendChild(scriptTag);
    };

    // The configuration parameters passed from the php block.
    // The window object may be reset during backoffice creation for some reasons,
    // as a result, the variable settings fail to keep in sync with window.boltConfig,
    // so we should treat it as a internal copy of window.boltConfig, the updates have to
    // be applied on this variable instead of window.boltConfig.
    var settings = window.boltConfig,
        bolt_button_selector     = '.bolt-checkout-button';

    // On multiple checkout open/close actions the success event remains registered
    // resulting in making the success call multiple times. This variable stores
    // the last request to be aborted before new one is sent.
    var save_request;

    ////////////////////////////////////
    // BoltCheckout.configure parameters
    ////////////////////////////////////
    var cart = {};

    var hints = {prefill:{}};

    var callbacks = {

        close: function () {
            // redirect on success order save
            if (callbacks.success_url) location.href = callbacks.success_url;
        },

        success: function (transaction, callback) {
            /**
             * Success transaction handler.
             * Sets the success url for the non-preauth flow.
             * Calls the callback function
             * that finishes the checkout modal operation.
             *
             * param object data    response from the non-preauth order/save controller, optional
             * return void
             */
            var processSuccess = function (data) {
                if (typeof data !== 'undefined') {
                    callbacks.success_url = data.success_url;
                }
                callback();
            };

            if (settings.is_pre_auth) {
                processSuccess();
                return;
            }

            // abort previously sent save order request.
            if (save_request) save_request.abort();
            // add the transaction reference and admin form key to the request parameters
            var parameters = [];
            parameters.push('form_key=' + $('[name="form_key"]').val());
            parameters.push('reference=' + transaction.reference);
            parameters.push('store_id=' + settings.storeId);
            parameters = parameters.join('&');
            // update order ajax request callback
            // sets the success order page redirect url from received data
            // and calls the final Bolt defined callback
            var onSuccess = function(data){
                processSuccess(data);
            };
            // ajax call to the update order transaction data endpoint.
            // passes the bolt transaction reference
            save_request = $.post(settings.save_order_url, parameters)
                            .done(onSuccess);
        },

        // the Bolt order is created right after the checkout button is clicked
        // and the checkout modal popup is opened only if order creation was successfull
        check: function () {
            var errors = [],
                // shipping address mask overlay
                addressShippingOverlay = $('#address-shipping-overlay')[0],
                // if the shipping address is not masked (i.e. overlay is not visible) shipping is required
                shippingRequired = addressShippingOverlay && addressShippingOverlay.offsetParent === null,
                isShippingMethodSelected = $('input[name="order[shipping_method]"][type=radio]:checked').length,
                email = $('input[name="order[account][email]"]').val();

            if (!cart.orderToken) {
                errors.push('Invalid Order Token');
            }

            if (!email || !email.trim()) {
                errors.push('Please specify the "Email"!');
            }

            if (shippingRequired && ! isShippingMethodSelected) {
                errors.push('Please specify the "Shipping Method"!');
            }

            if (errors.length) {
                var errorMsg = errors.join(', ');

                console.error('BoltPay Check: ', errorMsg);
                alert(errorMsg);

                return false;
            }

            return true;
        }
    };

    ////////////////////////////////////

    /////////////////////////////////////////////////////
    // Create Bolt order and configure BoltCheckout
    /////////////////////////////////////////////////////
    var create_request;

    var createOrder = function () {
        if (create_request) return;
        // preset success condition to false
        cart.orderToken = '';
        // define the params sent with the request variable
        var params = [];

        params.push('form_key=' + $('[name="form_key"]').val());
        params.push('payment_only=true');
        params = params.join('&');

        // set cart and hints data in a response callback
        var onSuccess = function(data){

            cart = data.cart;
            create_request = null;

            var prefill = isObject(data.hints.prefill) ?
                deepMergeObjects(hints.prefill, data.hints.prefill)
                : hints.prefill;
            hints = deepMergeObjects(hints, data.hints);
            hints.prefill = prefill;

            settings.storeId = data.storeId;
            settings.is_pre_auth = data.isPreAuth;

            if (data.backOfficeKey) {
                insertConnectScript(data.backOfficeKey);
            }
            if (data.paymentOnlyKey && settings.pay_by_link_url) {
                $(".bolt-checkout-pay-by-link").html("Send <a href='"
                    + settings.pay_by_link_url + "?publishable_key=" + data.paymentOnlyKey
                    + "&token=" + data.cart.orderToken
                    + "'>this link</a> to consumer to receive payment");
            }
            if (data.backOfficeKey && data.paymentOnlyKey && settings.pay_by_link_url) {
                $(".bolt-checkout-options-separator").show();
            }
        };

        var onError = function(error) {
            create_request = null;
        };
        // send create order request
        create_request = $.get(settings.create_order_url, params)
                          .done(onSuccess)
                          .fail(onError);
    };
    /////////////////////////////////////////////////////

    ////////////////////////////////////////////////
    // process the button when available on the page
    ////////////////////////////////////////////////
    onElementReady(bolt_button_selector, function(element) {
        createOrder();
    });
    ////////////////////////////////////////////////
    onElementReady(".bolt-checkout-pay-by-link", function(element) {
        createOrder();
    });
    ////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////
    // Reconfigure BoltCheckout with page collected hints data
    ///////////////////////////////////////////////////////////
    var old_hints;
    var configureHints = function() {

        // wait 3 seconds for the field(s) to be fully filled,
        // do not react on every keypress
        setTimeout(

            function() {
                var new_hints = JSON.stringify(hints);

                if (old_hints !== new_hints && window.BoltCheckout) {

                    BoltCheckout.configure(cart, hints, callbacks);
                    old_hints = new_hints;
                }
            },
            3000
        );
    };
    ///////////////////////////////////////////////////////////

    ///////////////////////////////////////////////////////////
    // Run function fn on element attributes change
    ///////////////////////////////////////////////////////////
    var monitorAttributesChange = function(selectors, fn, on_ready, visible_only) {
        for (var i = 0, length = selectors.length; i < length; i++) {

            var selector = selectors[i];

            ! function(selector) {

                onElementReady(selector, function(el) {
                    if (on_ready) fn(el);
                    var value = el.value;
                    onAttributesChange(selector, function(element) {
                        if (visible_only && element.offsetParent === null) return;
                        if (element.value !== value) {
                            value = element.value;
                            fn(element);
                        }
                    });
                })

            }(selector);
        }
    };
    ///////////////////////////////////////////////////////////

    // Map from address input field names to hints.prefill keys
    var input_name_to_hints_prefill = {
        'order[billing_address][firstname]': 'firstname',
        'order[billing_address][lastname]': 'lastname',
        'order[account][email]': 'email',
        'order[billing_address][telephone]': 'phone',
        'order[billing_address][street][0]': 'addressLine1',
        'order[billing_address][street][1]': 'addressLine2',
        'order[billing_address][city]': 'city',
        'order[billing_address][postcode]': 'zip'
    };

    // CSS selectors of the hints prefill elements parents
    // used to distinct hints related fields from others with the same name
    var input_name_to_hints_prefill_prefixes = [
        '#order-billing_address_fields'
    ];

    /////////////////////////////////////////////////////////////////////
    // Monitor address text input fields and update hints on value change
    /////////////////////////////////////////////////////////////////////
    for (var i = 0, length = input_name_to_hints_prefill_prefixes.length; i < length; i++)
    {
        var prefix = input_name_to_hints_prefill_prefixes[i];

        ! function (prefix)
        {
            for (var input_name in input_name_to_hints_prefill) {
                if (input_name_to_hints_prefill.hasOwnProperty(input_name))
                {
                    ! function (input_name) {
                        var prefill_key = input_name_to_hints_prefill[input_name],
                            input_selectors = [prefix + ' input[name="' + input_name + '"]'];

                        monitorAttributesChange(input_selectors, function(element) {
                            if (element.value) {
                                // set the hints prefill if the correlated input field value is not an empty string
                                hints.prefill[prefill_key] = element.value;
                            } else {
                                // delete hints prefill key if the value is empty
                                delete hints.prefill[prefill_key];
                            }
                            configureHints();
                        });
                    } (input_name);
                }
            }

        } (prefix);
    }
    /////////////////////////////////////////////////////////////////////

    /////////////////////////////////////////////////////
    // Call Bolt order creation Magento endpoint on
    // customer email change, storing the live page data in Bolt cart.
    // Email change triggers saving the email to quote in
    // Magento ajax call. Add a delay (setTimeout) to ensure
    // that Magento call runs first and the email is saved
    // before it is read in Bolt order creation.
    /////////////////////////////////////////////////////
    var customer_email_selector  = 'input[name="order[account][email]"]';
    var customer_email_value;
    $(customer_email_selector).on("change", function() {
        setTimeout(
            function() {
                var email = $(customer_email_selector).val().trim();
                if (email === "") return;
                if (email !== customer_email_value) {
                    customer_email_value = email;
                    createOrder();
                }
            },
            1500
        );
    });
});

</script>
